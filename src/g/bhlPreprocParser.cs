//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from bhlPreprocParser.g by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class bhlPreprocParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SHARP=1, CODE=2, IF=3, ELIF=4, ELSE=5, ENDIF=6, BANG=7, DIRECTIVE_WHITESPACES=8, 
		DIRECTIVE_STRING=9, CONDITIONAL_SYMBOL=10, NEW_LINE=11, DIRECTIVE_COMMENT=12, 
		SLASH=13;
	public const int
		RULE_program = 0, RULE_text = 1, RULE_code = 2, RULE_directive = 3, RULE_preprocessor_expression = 4;
	public static readonly string[] ruleNames = {
		"program", "text", "code", "directive", "preprocessor_expression"
	};

	private static readonly string[] _LiteralNames = {
		null, "'#'", null, "'if'", "'elif'", "'else'", "'endif'", "'!'", null, 
		null, null, null, null, "'/'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SHARP", "CODE", "IF", "ELIF", "ELSE", "ENDIF", "BANG", "DIRECTIVE_WHITESPACES", 
		"DIRECTIVE_STRING", "CONDITIONAL_SYMBOL", "NEW_LINE", "DIRECTIVE_COMMENT", 
		"SLASH"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "bhlPreprocParser.g"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static bhlPreprocParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public bhlPreprocParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public bhlPreprocParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ProgramContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(bhlPreprocParser.Eof, 0); }
		public TextContext[] text() {
			return GetRuleContexts<TextContext>();
		}
		public TextContext text(int i) {
			return GetRuleContext<TextContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlPreprocParserListener typedListener = listener as IbhlPreprocParserListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlPreprocParserListener typedListener = listener as IbhlPreprocParserListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlPreprocParserVisitor<TResult> typedVisitor = visitor as IbhlPreprocParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SHARP || _la==CODE) {
				{
				{
				State = 10; text();
				}
				}
				State = 15;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 16; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextContext : ParserRuleContext {
		public ITerminalNode SHARP() { return GetToken(bhlPreprocParser.SHARP, 0); }
		public DirectiveContext directive() {
			return GetRuleContext<DirectiveContext>(0);
		}
		public ITerminalNode NEW_LINE() { return GetToken(bhlPreprocParser.NEW_LINE, 0); }
		public ITerminalNode Eof() { return GetToken(bhlPreprocParser.Eof, 0); }
		public CodeContext code() {
			return GetRuleContext<CodeContext>(0);
		}
		public TextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_text; } }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlPreprocParserListener typedListener = listener as IbhlPreprocParserListener;
			if (typedListener != null) typedListener.EnterText(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlPreprocParserListener typedListener = listener as IbhlPreprocParserListener;
			if (typedListener != null) typedListener.ExitText(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlPreprocParserVisitor<TResult> typedVisitor = visitor as IbhlPreprocParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextContext text() {
		TextContext _localctx = new TextContext(Context, State);
		EnterRule(_localctx, 2, RULE_text);
		int _la;
		try {
			State = 23;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SHARP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 18; Match(SHARP);
				State = 19; directive();
				State = 20;
				_la = TokenStream.LA(1);
				if ( !(_la==Eof || _la==NEW_LINE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case CODE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 22; code();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeContext : ParserRuleContext {
		public ITerminalNode[] CODE() { return GetTokens(bhlPreprocParser.CODE); }
		public ITerminalNode CODE(int i) {
			return GetToken(bhlPreprocParser.CODE, i);
		}
		public CodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code; } }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlPreprocParserListener typedListener = listener as IbhlPreprocParserListener;
			if (typedListener != null) typedListener.EnterCode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlPreprocParserListener typedListener = listener as IbhlPreprocParserListener;
			if (typedListener != null) typedListener.ExitCode(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlPreprocParserVisitor<TResult> typedVisitor = visitor as IbhlPreprocParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeContext code() {
		CodeContext _localctx = new CodeContext(Context, State);
		EnterRule(_localctx, 4, RULE_code);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 26;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 25; Match(CODE);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 28;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectiveContext : ParserRuleContext {
		public DirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directive; } }
	 
		public DirectiveContext() { }
		public virtual void CopyFrom(DirectiveContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PreprocConditionalContext : DirectiveContext {
		public ITerminalNode IF() { return GetToken(bhlPreprocParser.IF, 0); }
		public Preprocessor_expressionContext preprocessor_expression() {
			return GetRuleContext<Preprocessor_expressionContext>(0);
		}
		public ITerminalNode ELSE() { return GetToken(bhlPreprocParser.ELSE, 0); }
		public ITerminalNode ENDIF() { return GetToken(bhlPreprocParser.ENDIF, 0); }
		public PreprocConditionalContext(DirectiveContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlPreprocParserListener typedListener = listener as IbhlPreprocParserListener;
			if (typedListener != null) typedListener.EnterPreprocConditional(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlPreprocParserListener typedListener = listener as IbhlPreprocParserListener;
			if (typedListener != null) typedListener.ExitPreprocConditional(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlPreprocParserVisitor<TResult> typedVisitor = visitor as IbhlPreprocParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocConditional(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectiveContext directive() {
		DirectiveContext _localctx = new DirectiveContext(Context, State);
		EnterRule(_localctx, 6, RULE_directive);
		try {
			State = 34;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IF:
				_localctx = new PreprocConditionalContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 30; Match(IF);
				State = 31; preprocessor_expression();
				}
				break;
			case ELSE:
				_localctx = new PreprocConditionalContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 32; Match(ELSE);
				}
				break;
			case ENDIF:
				_localctx = new PreprocConditionalContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 33; Match(ENDIF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Preprocessor_expressionContext : ParserRuleContext {
		public Preprocessor_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessor_expression; } }
	 
		public Preprocessor_expressionContext() { }
		public virtual void CopyFrom(Preprocessor_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PreprocNotContext : Preprocessor_expressionContext {
		public ITerminalNode BANG() { return GetToken(bhlPreprocParser.BANG, 0); }
		public Preprocessor_expressionContext preprocessor_expression() {
			return GetRuleContext<Preprocessor_expressionContext>(0);
		}
		public PreprocNotContext(Preprocessor_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlPreprocParserListener typedListener = listener as IbhlPreprocParserListener;
			if (typedListener != null) typedListener.EnterPreprocNot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlPreprocParserListener typedListener = listener as IbhlPreprocParserListener;
			if (typedListener != null) typedListener.ExitPreprocNot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlPreprocParserVisitor<TResult> typedVisitor = visitor as IbhlPreprocParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreprocConditionalSymbolContext : Preprocessor_expressionContext {
		public ITerminalNode CONDITIONAL_SYMBOL() { return GetToken(bhlPreprocParser.CONDITIONAL_SYMBOL, 0); }
		public PreprocConditionalSymbolContext(Preprocessor_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IbhlPreprocParserListener typedListener = listener as IbhlPreprocParserListener;
			if (typedListener != null) typedListener.EnterPreprocConditionalSymbol(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IbhlPreprocParserListener typedListener = listener as IbhlPreprocParserListener;
			if (typedListener != null) typedListener.ExitPreprocConditionalSymbol(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlPreprocParserVisitor<TResult> typedVisitor = visitor as IbhlPreprocParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocConditionalSymbol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Preprocessor_expressionContext preprocessor_expression() {
		Preprocessor_expressionContext _localctx = new Preprocessor_expressionContext(Context, State);
		EnterRule(_localctx, 8, RULE_preprocessor_expression);
		try {
			State = 39;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CONDITIONAL_SYMBOL:
				_localctx = new PreprocConditionalSymbolContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 36; Match(CONDITIONAL_SYMBOL);
				}
				break;
			case BANG:
				_localctx = new PreprocNotContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 37; Match(BANG);
				State = 38; preprocessor_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\xF', ',', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x3', '\x2', '\a', '\x2', '\xE', '\n', '\x2', '\f', 
		'\x2', '\xE', '\x2', '\x11', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x5', '\x3', '\x1A', '\n', '\x3', '\x3', '\x4', '\x6', '\x4', '\x1D', 
		'\n', '\x4', '\r', '\x4', '\xE', '\x4', '\x1E', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '%', '\n', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '*', '\n', '\x6', '\x3', '\x6', 
		'\x2', '\x2', '\a', '\x2', '\x4', '\x6', '\b', '\n', '\x2', '\x3', '\x3', 
		'\x3', '\r', '\r', '\x2', ',', '\x2', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'\x4', '\x19', '\x3', '\x2', '\x2', '\x2', '\x6', '\x1C', '\x3', '\x2', 
		'\x2', '\x2', '\b', '$', '\x3', '\x2', '\x2', '\x2', '\n', ')', '\x3', 
		'\x2', '\x2', '\x2', '\f', '\xE', '\x5', '\x4', '\x3', '\x2', '\r', '\f', 
		'\x3', '\x2', '\x2', '\x2', '\xE', '\x11', '\x3', '\x2', '\x2', '\x2', 
		'\xF', '\r', '\x3', '\x2', '\x2', '\x2', '\xF', '\x10', '\x3', '\x2', 
		'\x2', '\x2', '\x10', '\x12', '\x3', '\x2', '\x2', '\x2', '\x11', '\xF', 
		'\x3', '\x2', '\x2', '\x2', '\x12', '\x13', '\a', '\x2', '\x2', '\x3', 
		'\x13', '\x3', '\x3', '\x2', '\x2', '\x2', '\x14', '\x15', '\a', '\x3', 
		'\x2', '\x2', '\x15', '\x16', '\x5', '\b', '\x5', '\x2', '\x16', '\x17', 
		'\t', '\x2', '\x2', '\x2', '\x17', '\x1A', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\x1A', '\x5', '\x6', '\x4', '\x2', '\x19', '\x14', '\x3', '\x2', 
		'\x2', '\x2', '\x19', '\x18', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '\x1B', '\x1D', '\a', '\x4', '\x2', '\x2', 
		'\x1C', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x1E', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '\x1F', '\a', '\x3', '\x2', '\x2', '\x2', 
		' ', '!', '\a', '\x5', '\x2', '\x2', '!', '%', '\x5', '\n', '\x6', '\x2', 
		'\"', '%', '\a', '\a', '\x2', '\x2', '#', '%', '\a', '\b', '\x2', '\x2', 
		'$', ' ', '\x3', '\x2', '\x2', '\x2', '$', '\"', '\x3', '\x2', '\x2', 
		'\x2', '$', '#', '\x3', '\x2', '\x2', '\x2', '%', '\t', '\x3', '\x2', 
		'\x2', '\x2', '&', '*', '\a', '\f', '\x2', '\x2', '\'', '(', '\a', '\t', 
		'\x2', '\x2', '(', '*', '\x5', '\n', '\x6', '\x2', ')', '&', '\x3', '\x2', 
		'\x2', '\x2', ')', '\'', '\x3', '\x2', '\x2', '\x2', '*', '\v', '\x3', 
		'\x2', '\x2', '\x2', '\a', '\xF', '\x19', '\x1E', '$', ')',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
